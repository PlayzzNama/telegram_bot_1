require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const cron = require('node-cron');
const fs = require('fs');

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHANNEL_ID = process.env.CHANNEL_ID;     // @username –∞–±–æ -100...
const CHANNEL_LINK = process.env.CHANNEL_LINK; // https://t.me/username

if (!BOT_TOKEN || !CHANNEL_ID || !CHANNEL_LINK) {
  throw new Error('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å BOT_TOKEN, CHANNEL_ID —ñ CHANNEL_LINK —É .env');
}

const bot = new Telegraf(BOT_TOKEN);

// ---- –î–∞–Ω—ñ –º–∞—Ç—á—ñ–≤ (–ø—Ä–∏–∫–ª–∞–¥) ----
const matches = [
  {
    id: '1',
    teams: '‚ö´‚ö™–ö–∞—Ä–∞–±–∞—Ö - –§–µ—Ä–µ–Ω—Ü–≤–∞—Ä–æ—àüü¢‚ö™',
    stadium: '–°—Ç–∞–¥—ñ–æ–Ω —ñ–º. –¢–æ—Ñ—ñ–∫–∞ –ë–∞—Ö—Ä–∞–º–æ–≤–∞ (–ë–∞–∫—É) üá¶üáø',
    tournament: '–ö–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è –¥–æ –õ–ß',
    time: '2025-08-27T19:45:00', // –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO –¥–ª—è Date
    streamUrl: 'https://k352.liveball.st/match/1435553'
  },
  {
    id: '2',
    teams: 'üî¥‚ö™–ë–µ–Ω—Ñ—ñ–∫–∞ - –§–µ–Ω–µ—Ä–±–∞—Ö—á–µ‚ö´üü°',
    stadium: '–ï—à—Ç–∞–¥—ñ—É –¥–∞ –õ—É–∂ (–õ—ñ—Å–∞–±–æ–Ω) üáµüáπ',
    tournament: '–ö–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è –¥–æ –õ–ß',
    time: '2025-08-27T22:00:00',
    streamUrl: 'https://k352.liveball.st/match/1435556'
  },
  {
    id: '3',
    teams: '‚ö™üîµ–ö–æ–ø–µ–Ω–≥–∞–≥–µ–Ω - –ë–∞–∑–µ–ª—åüî¥üîµ',
    stadium: '–ü–∞—Ä–∫–µ–Ω (–ö–æ–ø–µ–Ω–≥–∞–≥–µ–Ω) üá©üá∞',
    tournament: '–ö–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è –¥–æ –õ–ß',
    time: '2025-08-27T22:00:00',
    streamUrl: 'https://k352.liveball.st/match/1435554'
  },
  {
    id: '4',
    teams: 'üîµ‚ö´–ë—Ä—é–≥–≥–µ - –†–µ–π–Ω–¥–∂–µ—Ä—Åüîµ‚ö™',
    stadium: '–Ø–Ω –ë—Ä–µ–π–¥–µ–ª –°—Ç–∞–¥—ñ–æ–Ω (–ë—Ä—é–≥–≥–µ) üáßüá™',
    tournament: '–ö–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è –¥–æ –õ–ß',
    time: '2025-08-27T22:00:00',
    streamUrl: 'https://k352.liveball.st/match/1435555'
  },
  {
    id: '5',
    teams: 'üîµ‚ö™–°–µ–ª—å—Ç–∞ - –ë–µ—Ç—ñ—Åüü¢‚ö™',
    stadium: '–ï—Å—Ç–∞–¥—ñ–æ –ë–∞–ª–∞—ó–¥–æ—Å (–í—ñ–≥–æ) üá™üá∏',
    tournament: '–õ–∞–õ—ñ–≥–∞',
    time: '2025-08-27T22:00:00',
    streamUrl: 'https://k352.liveball.st/match/1390871'
  },
  {
  id: '6',
  teams: '‚ö´‚ö™–¢–µ—Å—Ç–æ–≤–∏–π FC - FC Demoüîµ‚ö™',
  stadium: '–¢–µ—Å—Ç–æ–≤–∏–π —Å—Ç–∞–¥—ñ–æ–Ω üèüÔ∏è',
  tournament: '–¢–µ—Å—Ç–æ–≤–∏–π —Ç—É—Ä–Ω—ñ—Ä üèÜ',
  time: new Date(Date.now() + 6 * 60000).toISOString(), // —á–µ—Ä–µ–∑ 10 —Ö–≤–∏–ª–∏–Ω
  streamUrl: 'https://example.com/test-stream'
  }
];

// ---- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ ----
async function isSubscribed(userId) {
  try {
    const m = await bot.telegram.getChatMember(CHANNEL_ID, userId);
    return ['member', 'administrator', 'creator'].includes(m.status);
  } catch (e) {
    return false;
  }
}

// ---- –•–µ–ª–ø–µ—Ä–∏ ----
function matchMessage(m) {
  return [
    `${m.teams}`,
    `üèüÔ∏è ${m.stadium}`,
    `üèÜ ${m.tournament}`,
    `‚åö ${new Date(m.time).toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' })}`,
    ``,
    `‚ö†Ô∏è(—Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—è –∑'—è–≤–ª—è—î—Ç—å—Å—è –∑–∞ 5 —Ö–≤–∏–ª–∏–Ω –¥–æ –≥—Ä–∏)‚ö†Ô∏è`
  ].join('\n');
}

function matchesKeyboard() {
  return Markup.inlineKeyboard(
    matches.map(m => [Markup.button.callback(m.teams, `match_${m.id}`)])
  );
}

async function showMatches(ctx) {
  return ctx.reply('–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—é:', matchesKeyboard());
}

function matchKeyboard(m) {
  return Markup.inlineKeyboard([
    [Markup.button.url('‚ñ∂Ô∏è –î–∏–≤–∏—Ç–∏—Å—è –º–∞—Ç—á', m.streamUrl)],
    [Markup.button.callback('‚è∞ –ù–∞–≥–∞–¥–∞—Ç–∏', `remind_${m.id}`)],
    [Markup.button.callback('‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è', `back_to_matches`)]
  ]);
}

// ---- –ë–∞–∑–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ----
let reminders = [];
const REMINDER_FILE = 'reminders.json';

if (fs.existsSync(REMINDER_FILE)) {
  reminders = JSON.parse(fs.readFileSync(REMINDER_FILE));
}

function saveReminders() {
  fs.writeFileSync(REMINDER_FILE, JSON.stringify(reminders));
}

function reminderTimeKeyboard(matchId) {
  return Markup.inlineKeyboard([
    [Markup.button.callback('‚è± 5 —Ö–≤', `setremind_${matchId}_5`)],
    [Markup.button.callback('‚è± 10 —Ö–≤', `setremind_${matchId}_10`)],
    [Markup.button.callback('‚è± 15 —Ö–≤', `setremind_${matchId}_15`)],
    [Markup.button.callback('‚è± 30 —Ö–≤', `setremind_${matchId}_30`)]
  ]);
}

// ---- –ö–æ–º–∞–Ω–¥–∏ ----
bot.start(async (ctx) => {
  const ok = await isSubscribed(ctx.from.id);

  if (!ok) {
    return ctx.reply(
      '–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:',
      Markup.inlineKeyboard([
        [Markup.button.url('üîó –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è', CHANNEL_LINK)],
        [Markup.button.callback('‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É', 'check_sub')]
      ])
    );
  }

  return showMatches(ctx);
});

bot.command('matches', async (ctx) => showMatches(ctx));

// ---- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ----
bot.action('check_sub', async (ctx) => {
  const ok = await isSubscribed(ctx.from.id);
  if (!ok) return ctx.answerCbQuery('‚ùå –í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ', { show_alert: true });

  try { await ctx.deleteMessage(); } catch (_) {}
  await ctx.answerCbQuery('‚úÖ –ü—ñ–¥–ø–∏—Å–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ');
  return showMatches(ctx);
});

// –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á—É
bot.action(/^match_(.+)$/, async (ctx) => {
  const id = ctx.match[1];
  const m = matches.find(x => x.id === id);
  if (!m) return ctx.answerCbQuery('–ú–∞—Ç—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');

  try { await ctx.deleteMessage(); } catch (_) {}
  await ctx.answerCbQuery();
  return ctx.reply(matchMessage(m), matchKeyboard(m));
});

// –û–±—Ä–æ–±–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–≤–∏–±—ñ—Ä —á–∞—Å—É)
bot.action(/^remind_(.+)$/, async (ctx) => {
  const matchId = ctx.match[1];
  await ctx.deleteMessage();
  return ctx.reply('–û–±–µ—Ä—ñ—Ç—å, –∑–∞ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω –Ω–∞–≥–∞–¥–∞—Ç–∏:', reminderTimeKeyboard(matchId));
});

bot.action(/^setremind_(.+)_(\d+)$/, async (ctx) => {
  const matchId = ctx.match[1];
  const minutesBefore = parseInt(ctx.match[2]);
  const userId = ctx.from.id;

  const match = matches.find(m => m.id === matchId);
  if (!match) return ctx.answerCbQuery('–ú–∞—Ç—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');

  reminders.push({
    userId,
    matchId,
    matchTime: match.time,
    minutesBefore
  });
  saveReminders();

  await ctx.deleteMessage();
  return ctx.reply(`‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ ${minutesBefore} —Ö–≤ –¥–æ –º–∞—Ç—á—É "${match.teams}"`);
});

// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –º–∞—Ç—á—ñ–≤
bot.action('back_to_matches', async (ctx) => {
  try { await ctx.deleteMessage(); } catch (_) {}
  return showMatches(ctx);
});

// ---- –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ----
cron.schedule('* * * * *', () => {
  const now = new Date();
  reminders.forEach((r, index) => {
    const matchDate = new Date(r.matchTime);
    const diff = (matchDate - now) / 60000; // —Ä—ñ–∑–Ω–∏—Ü—è —É —Ö–≤–∏–ª–∏–Ω–∞—Ö
    if (diff <= r.minutesBefore && diff > r.minutesBefore - 1) {
      bot.telegram.sendMessage(r.userId,
        `‚öΩ –ú–∞—Ç—á "${matches.find(m => m.id===r.matchId).teams}" –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ ${r.minutesBefore} —Ö–≤!\nüèüÔ∏è ${matches.find(m => m.id===r.matchId).stadium}\nüèÜ ${matches.find(m => m.id===r.matchId).tournament}\n‚åö ${new Date(matches.find(m => m.id===r.matchId).time).toLocaleTimeString('uk-UA', { hour:'2-digit', minute:'2-digit' })}\n‚ñ∂Ô∏è –î–∏–≤–∏—Ç–∏—Å—è —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—é: ${matches.find(m => m.id===r.matchId).streamUrl}`
      );
      reminders.splice(index, 1);
      saveReminders();
    }
  });
});

// ---- –ì–ª–æ–±–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ ----
bot.catch((err, ctx) => {
  console.error('Bot error:', err);
  ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
});

// ---- –ó–∞–ø—É—Å–∫ ----
bot.launch().then(() => console.log('Bot started'));
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
