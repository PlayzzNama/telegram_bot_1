require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const cron = require("node-cron");
const fs = require("fs");

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHANNEL_ID = process.env.CHANNEL_ID; // @username –∞–±–æ -100...
const CHANNEL_LINK = process.env.CHANNEL_LINK; // https://t.me/username

if (!BOT_TOKEN || !CHANNEL_ID || !CHANNEL_LINK) {
  throw new Error("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å BOT_TOKEN, CHANNEL_ID —ñ CHANNEL_LINK —É .env");
}

const bot = new Telegraf(BOT_TOKEN);

// ---- –î–∞–Ω—ñ –º–∞—Ç—á—ñ–≤ ----
const matches = [
  {
    id: "1",
    teams: "–ß–µ–ª—Å—ñ - –§—É–ª–≥–µ–º",
    stadium: "–°—Ç–µ–º—Ñ–æ—Ä–¥ –ë—Ä—ñ–¥–∂ (–õ–æ–Ω–¥–æ–Ω) üá¨üáß",
    tournament: "–ü—Ä–µ–º'—î—Ä-–ª—ñ–≥–∞",
    time: "2025-08-30T14:30:00",
    streamUrl: "https://k354.liveball.st/match/1378991",
  },
  {
    id: "2",
    teams: "–í—É–ª–≤–µ—Ä–≥–µ–º–ø—Ç–æ–Ω - –ï–≤–µ—Ä—Ç–æ–Ω",
    stadium: "–ú–æ–ª—ñ–Ω—å—î (–í—É–ª–≤–µ—Ä–≥–µ–º–ø—Ç–æ–Ω) üá¨üáß",
    tournament: "–ü—Ä–µ–º'—î—Ä-–ª—ñ–≥–∞",
    time: "2025-08-30T17:00:00",
    streamUrl: "https://k354.liveball.st/match/1378998",
  },
  {
    id: "3",
    teams: "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥ - –ë–µ—Ä–Ω–ª—ñ",
    stadium: "–û–ª–¥ –¢—Ä–∞—Ñ—Ñ–æ—Ä–¥ (–ú–∞–Ω—á–µ—Å—Ç–µ—Ä) üá¨üáß",
    tournament: "–ü—Ä–µ–º'—î—Ä-–ª—ñ–≥–∞",
    time: "2025-08-30T17:00:00",
    streamUrl: "https://k354.liveball.st/match/1378994",
  },
  {
    id: "4",
    teams: "–°–∞–Ω–¥–µ—Ä–ª–µ–Ω–¥ - –ë—Ä–µ–Ω—Ç—Ñ–æ—Ä–¥",
    stadium: "–°—Ç–µ–¥—ñ—É–º –æ—Ñ –õ–∞–π—Ç (–°–∞–Ω–¥–µ—Ä–ª–µ–Ω–¥) üá¨üáß",
    tournament: "–ü—Ä–µ–º'—î—Ä-–ª—ñ–≥–∞",
    time: "2025-08-30T17:00:00",
    streamUrl: "https://k354.liveball.st/match/1378996",
  },
  {
    id: "5",
    teams: "–¢–æ—Ç—Ç–µ–Ω–≥–µ–º - –ë–æ—Ä–Ω–º—É—Ç",
    stadium: "–¢–æ—Ç—Ç–µ–Ω–≥–µ–º –•–æ—Ç—Å–ø—É—Ä (–õ–æ–Ω–¥–æ–Ω) üá¨üáß",
    tournament: "–ü—Ä–µ–º'—î—Ä-–ª—ñ–≥–∞",
    time: "2025-08-30T17:00:00",
    streamUrl: "https://k354.liveball.st/match/1378997",
  },
  {
    id: "6",
    teams: "–õ—ñ–¥—Å - –ù—å—é–∫–∞—Å–ª –Æ–Ω–∞–π—Ç–µ–¥",
    stadium: "–ï–ª–ª–∞–Ω–¥ –†–æ—É–¥ (–õ—ñ–¥—Å) üá¨üáß",
    tournament: "–ü—Ä–µ–º'—î—Ä-–ª—ñ–≥–∞",
    time: "2025-08-30T19:30:00",
    streamUrl: "https://k354.liveball.st/match/1378992",
  },
  {
    id: "7",
    teams: "–ê–ª–∞–≤–µ—Å - –ê—Ç–ª–µ—Ç—ñ–∫–æ",
    stadium: "–ú–µ–Ω–¥—ñ—Å–æ—Ä—Ä–æ—Å–∞ (–í—ñ—Ç–æ—Ä—ñ—è-–ì–∞—Å—Ç–µ–π—Å) üá™üá∏",
    tournament: "–õ–∞–õ—ñ–≥–∞",
    time: "2025-08-30T18:00:00",
    streamUrl: "https://k354.liveball.st/match/1390839",
  },
  {
    id: "8",
    teams: "–†–µ–∞–ª –û–≤‚Äô—î–¥–æ - –†–µ–∞–ª –°–æ—Å—å—î–¥–∞–¥",
    stadium: "–ö–∞—Ä–ª–æ—Å –¢–∞—Ä—Ç‚Äô—î—Ä–µ (–û–≤ º—î–¥–æ) üá™üá∏",
    tournament: "–õ–∞–õ—ñ–≥–∞",
    time: "2025-08-30T20:30:00",
    streamUrl: "https://k354.liveball.st/match/1390847",
  },
  {
    id: "9",
    teams: "–ñ–∏—Ä–æ–Ω–∞ - –°–µ–≤—ñ–ª—å—è",
    stadium: "–ú—É–Ω—Ç—ñ–ª—ñ–≤—ñ (–ñ–∏—Ä–æ–Ω–∞) üá™üá∏",
    tournament: "–õ–∞–õ—ñ–≥–∞",
    time: "2025-08-30T20:30:00",
    streamUrl: "https://k354.liveball.st/match/1390844",
  },
  {
    id: "10",
    teams: "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥ - –ú–∞–ª—å–æ—Ä–∫–∞",
    stadium: "–°–∞–Ω—Ç—å—è–≥–æ –ë–µ—Ä–Ω–∞–±–µ—É (–ú–∞–¥—Ä–∏–¥) üá™üá∏",
    tournament: "–õ–∞–õ—ñ–≥–∞",
    time: "2025-08-30T22:30:00",
    streamUrl: "https://k354.liveball.st/match/1390846",
  },
  {
    id: "11",
    teams: "–ë–æ–ª–æ–Ω—å—è - –ö–æ–º–æ",
    stadium: "–†–µ–Ω–∞—Ç–æ –î–∞–ª—å-–ê—Ä–∞ (–ë–æ–ª–æ–Ω—å—è) üáÆüáπ",
    tournament: "–°–µ—Ä—ñ—è A",
    time: "2025-08-30T19:30:00",
    streamUrl: "https://k354.liveball.st/match/1377874",
  },
  {
    id: "12",
    teams: "–ü–∞—Ä–º–∞ - –ê—Ç–∞–ª–∞–Ω—Ç–∞",
    stadium: "–ï–Ω–Ω—ñ–æ –¢–∞—Ä–¥—ñ–Ω—ñ (–ü–∞—Ä–º–∞) üáÆüáπ",
    tournament: "–°–µ—Ä—ñ—è A",
    time: "2025-08-30T19:30:00",
    streamUrl: "https://k354.liveball.st/match/1377881",
  },
  {
    id: "13",
    teams: "–ù–∞–ø–æ–ª—ñ - –ö–∞–ª—å—è—Ä—ñ",
    stadium: "–î—ñ—î–≥–æ –ê—Ä–º–∞–Ω–¥–æ –ú–∞—Ä–∞–¥–æ–Ω–∞ (–ù–µ–∞–ø–æ–ª—å) üáÆüáπ",
    tournament: "–°–µ—Ä—ñ—è A",
    time: "2025-08-30T21:45:00",
    streamUrl: "https://k354.liveball.st/match/1377880",
  },
  {
    id: "14",
    teams: "–ü—ñ–∑–∞ - –†–æ–º–∞",
    stadium: "–ê—Ä–µ–Ω–∞ –ì–∞—Ä—ñ–±–∞–ª—å–¥—ñ (–ü—ñ–∑–∞) üáÆüáπ",
    tournament: "–°–µ—Ä—ñ—è A",
    time: "2025-08-30T21:45:00",
    streamUrl: "https://k354.liveball.st/match/1377882",
  },
  {
    id: "15",
    teams: "–í–µ—Ä–¥–µ—Ä –ë—Ä–µ–º–µ–Ω - –ë–∞–π—î—Ä –õ–µ–≤–µ—Ä–∫—É–∑–µ–Ω",
    stadium: "–í–µ–∑–µ—Ä—à—Ç–∞–¥—ñ–æ–Ω (–ë—Ä–µ–º–µ–Ω) üá©üá™",
    tournament: "–ë—É–Ω–¥–µ—Å–ª—ñ–≥–∞",
    time: "2025-08-30T16:30:00",
    streamUrl: "https://k354.liveball.st/match/1388324",
  },
  {
    id: "16",
    teams: "–ì–æ—Ñ—Ñ–µ–Ω–≥–∞–π–º - –ê–π–Ω—Ç—Ä–∞—Ö—Ç –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç",
    stadium: "–ü—Ä–æ–π–ó–µ—Ä–æ –ê—Ä–µ–Ω–∞ (–ó—ñ–Ω—Å–≥–∞–π–º) üá©üá™",
    tournament: "–ë—É–Ω–¥–µ—Å–ª—ñ–≥–∞",
    time: "2025-08-30T16:30:00",
    streamUrl: "https://k354.liveball.st/match/1388321",
  },
  {
    id: "17",
    teams: "–†–ë –õ–µ–π–ø—Ü–∏–≥ - –ì–∞–π–¥–µ–Ω–≥–∞–π–º",
    stadium: "–†–µ–¥ –ë—É–ª–ª –ê—Ä–µ–Ω–∞ (–õ–µ–π–ø—Ü–∏–≥) üá©üá™",
    tournament: "–ë—É–Ω–¥–µ—Å–ª—ñ–≥–∞",
    time: "2025-08-30T16:30:00",
    streamUrl: "https://k354.liveball.st/match/1388322",
  },
  {
    id: "18",
    teams: "–®—Ç—É—Ç–≥–∞—Ä—Ç - –ë–æ—Ä—É—Å—Å—ñ—è –ú.",
    stadium: "–ú–µ—Ä—Å–µ–¥–µ—Å-–ë–µ–Ω—Ü –ê—Ä–µ–Ω–∞ (–®—Ç—É—Ç–≥–∞—Ä—Ç) üá©üá™",
    tournament: "–ë—É–Ω–¥–µ—Å–ª—ñ–≥–∞",
    time: "2025-08-30T16:30:00",
    streamUrl: "https://k354.liveball.st/match/1388323",
  },
  {
    id: "19",
    teams: "–ê—É–≥—Å–±—É—Ä–≥ - –ë–∞–≤–∞—Ä—ñ—è –ú—é–Ω—Ö–µ–Ω",
    stadium: "WWK –ê—Ä–µ–Ω–∞ (–ê—É–≥—Å–±—É—Ä–≥) üá©üá™",
    tournament: "–ë—É–Ω–¥–µ—Å–ª—ñ–≥–∞",
    time: "2025-08-30T19:30:00",
    streamUrl: "https://k354.liveball.st/match/1388317",
  },
  {
    id: "20",
    teams: "–õ–æ—Ä—å—è–Ω - –õ—ñ–ª–ª—å",
    stadium: "–°—Ç–∞–¥ –¥—é –ú—É—Å—Ç—É–∞—Ä (–õ–æ—Ä—å—è–Ω) üá´üá∑",
    tournament: "–õ—ñ–≥–∞ 1",
    time: "2025-08-30T18:00:00",
    streamUrl: "https://k354.liveball.st/match/1387719",
  },
  {
    id: "21",
    teams: "–ù–∞–Ω—Ç - –û—Å–µ—Ä",
    stadium: "–°—Ç–∞–¥ –¥–µ –ª–∞ –ë–æ–∂—É–∞—Ä (–ù–∞–Ω—Ç) üá´üá∑",
    tournament: "–õ—ñ–≥–∞ 1",
    time: "2025-08-30T20:00:00",
    streamUrl: "https://k354.liveball.st/match/1387722",
  },
  {
    id: "22",
    teams: "–¢—É–ª—É–∑–∞ - –ü–°–ñ",
    stadium: "–°—Ç–∞–¥—ñ–æ–Ω –¥–µ –¢—É–ª—É–∑ (–¢—É–ª—É–∑–∞) üá´üá∑",
    tournament: "–õ—ñ–≥–∞ 1",
    time: "2025-08-30T22:05:00",
    streamUrl: "https://k354.liveball.st/match/1387724",
  },
];

// ---- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ ----
async function isSubscribed(userId) {
  try {
    const m = await bot.telegram.getChatMember(CHANNEL_ID, userId);
    return ["member", "administrator", "creator"].includes(m.status);
  } catch (e) {
    return false;
  }
}

// ---- –•–µ–ª–ø–µ—Ä–∏ ----
function matchMessage(m) {
  return [
    `${m.teams}`,
    `üèüÔ∏è ${m.stadium}`,
    `üèÜ ${m.tournament}`,
    `‚åö ${new Date(m.time).toLocaleTimeString("uk-UA", {
      hour: "2-digit",
      minute: "2-digit",
    })}`,
    ``,
    `‚ö†Ô∏è(—Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—è –∑'—è–≤–ª—è—î—Ç—å—Å—è –∑–∞ 5 —Ö–≤–∏–ª–∏–Ω –¥–æ –≥—Ä–∏)‚ö†Ô∏è`,
  ].join("\n");
}

function leaguesKeyboard() {
  const leaguesOrder = [
    "–ü—Ä–µ–º'—î—Ä-–ª—ñ–≥–∞",
    "–õ–∞–õ—ñ–≥–∞",
    "–°–µ—Ä—ñ—è A",
    "–ë—É–Ω–¥–µ—Å–ª—ñ–≥–∞",
    "–õ—ñ–≥–∞ 1",
  ];
  const leagues = [...new Set(matches.map((m) => m.tournament))];
  const sorted = leaguesOrder.filter((l) => leagues.includes(l));
  return Markup.inlineKeyboard(
    sorted.map((l) => [Markup.button.callback(l, `league_${l}`)])
  );
}

async function showLeagues(ctx) {
  return ctx.reply("–û–±–µ—Ä—ñ—Ç—å –ª—ñ–≥—É:", leaguesKeyboard());
}

function matchesKeyboard(tournament) {
  return Markup.inlineKeyboard([
    ...matches
      .filter((m) => m.tournament === tournament)
      .map((m) => [Markup.button.callback(m.teams, `match_${m.id}`)]),
    [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ª—ñ–≥", "back_to_leagues")],
  ]);
}

async function showMatches(ctx, tournament) {
  return ctx.reply(
    `–û–±–µ—Ä—ñ—Ç—å –º–∞—Ç—á (${tournament}):`,
    matchesKeyboard(tournament)
  );
}

function matchKeyboard(m) {
  return Markup.inlineKeyboard([
    [Markup.button.url("‚ñ∂Ô∏è –î–∏–≤–∏—Ç–∏—Å—è –º–∞—Ç—á", m.streamUrl)],
    [Markup.button.callback("‚è∞ –ù–∞–≥–∞–¥–∞—Ç–∏", `remind_${m.id}`)],
    [Markup.button.callback("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", `back_to_leagues`)],
  ]);
}

// ---- –ë–∞–∑–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ----
let reminders = [];
const REMINDER_FILE = "reminders.json";

if (fs.existsSync(REMINDER_FILE)) {
  reminders = JSON.parse(fs.readFileSync(REMINDER_FILE));
}

function saveReminders() {
  fs.writeFileSync(REMINDER_FILE, JSON.stringify(reminders));
}

function reminderTimeKeyboard(matchId) {
  return Markup.inlineKeyboard([
    [Markup.button.callback("‚è± 5 —Ö–≤", `setremind_${matchId}_5`)],
    [Markup.button.callback("‚è± 10 —Ö–≤", `setremind_${matchId}_10`)],
    [Markup.button.callback("‚è± 15 —Ö–≤", `setremind_${matchId}_15`)],
    [Markup.button.callback("‚è± 30 —Ö–≤", `setremind_${matchId}_30`)],
  ]);
}

// ---- –ö–æ–º–∞–Ω–¥–∏ ----
bot.start(async (ctx) => {
  const ok = await isSubscribed(ctx.from.id);

  if (!ok) {
    return ctx.reply(
      "–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
      Markup.inlineKeyboard([
        [Markup.button.url("üîó –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", CHANNEL_LINK)],
        [Markup.button.callback("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", "check_sub")],
      ])
    );
  }

  return showLeagues(ctx);
});

bot.command("matches", async (ctx) => showLeagues(ctx));

// ---- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ----
bot.action("check_sub", async (ctx) => {
  const ok = await isSubscribed(ctx.from.id);
  if (!ok)
    return ctx.answerCbQuery("‚ùå –í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ", { show_alert: true });

  try {
    await ctx.deleteMessage();
  } catch (_) {}
  await ctx.answerCbQuery("‚úÖ –ü—ñ–¥–ø–∏—Å–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ");
  return showLeagues(ctx);
});

// –í–∏–±—ñ—Ä –ª—ñ–≥–∏
bot.action(/^league_(.+)$/, async (ctx) => {
  const league = ctx.match[1];
  try {
    await ctx.deleteMessage();
  } catch (_) {}
  return showMatches(ctx, league);
});

// –í–∏–±—ñ—Ä –º–∞—Ç—á—É
bot.action(/^match_(.+)$/, async (ctx) => {
  const id = ctx.match[1];
  const m = matches.find((x) => x.id === id);
  if (!m) return ctx.answerCbQuery("–ú–∞—Ç—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");

  try {
    await ctx.deleteMessage();
  } catch (_) {}
  await ctx.answerCbQuery();
  return ctx.reply(matchMessage(m), matchKeyboard(m));
});

// –û–±—Ä–æ–±–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–≤–∏–±—ñ—Ä —á–∞—Å—É)
bot.action(/^remind_(.+)$/, async (ctx) => {
  const matchId = ctx.match[1];
  await ctx.deleteMessage();
  return ctx.reply(
    "–û–±–µ—Ä—ñ—Ç—å, –∑–∞ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω –Ω–∞–≥–∞–¥–∞—Ç–∏:",
    reminderTimeKeyboard(matchId)
  );
});

bot.action(/^setremind_(.+)_(\d+)$/, async (ctx) => {
  const matchId = ctx.match[1];
  const minutesBefore = parseInt(ctx.match[2]);
  const userId = ctx.from.id;

  const match = matches.find((m) => m.id === matchId);
  if (!match) return ctx.answerCbQuery("–ú–∞—Ç—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");

  reminders.push({
    userId,
    matchId,
    matchTime: match.time,
    minutesBefore,
  });
  saveReminders();

  await ctx.deleteMessage();
  return ctx.reply(
    `‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ ${minutesBefore} —Ö–≤ –¥–æ –º–∞—Ç—á—É "${match.teams}"`
  );
});

// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ª—ñ–≥
bot.action("back_to_leagues", async (ctx) => {
  try {
    await ctx.deleteMessage();
  } catch (_) {}
  return showLeagues(ctx);
});

// ---- –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ----
cron.schedule("* * * * *", () => {
  const now = new Date();
  reminders.forEach((r, index) => {
    const matchDate = new Date(r.matchTime);
    const diff = (matchDate - now) / 60000; // —Ä—ñ–∑–Ω–∏—Ü—è —É —Ö–≤–∏–ª–∏–Ω–∞—Ö
    if (diff <= r.minutesBefore && diff > r.minutesBefore - 1) {
      const match = matches.find((m) => m.id === r.matchId);
      if (!match) return;
      bot.telegram.sendMessage(
        r.userId,
        `‚öΩ –ú–∞—Ç—á "${match.teams}" –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ ${
          r.minutesBefore
        } —Ö–≤!\nüèüÔ∏è ${match.stadium}\nüèÜ ${match.tournament}\n‚åö ${new Date(
          match.time
        ).toLocaleTimeString("uk-UA", {
          hour: "2-digit",
          minute: "2-digit",
        })}\n‚ñ∂Ô∏è –î–∏–≤–∏—Ç–∏—Å—è —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—é: ${match.streamUrl}`
      );
      reminders.splice(index, 1);
      saveReminders();
    }
  });
});

// ---- –ì–ª–æ–±–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ ----
bot.catch((err, ctx) => {
  console.error("Bot error:", err);
  ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
});

// ---- –ó–∞–ø—É—Å–∫ ----
bot.launch().then(() => console.log("Bot started"));
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
